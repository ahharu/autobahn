import org.jenkinsci.plugins.workflow.steps.FlowInterruptedException

final Map<String, String> COLOR = [
  SUCCESS: 'GREEN',
  UNSTABLE: 'YELLOW',
  FAILURE: 'RED',
  NOT_BUILT: 'GRAY',
  ABORTED: 'GRAY'
]

final String PROJECT = 'autobahn'
final int DEPLOY_RETRIES = 3

try {
  node('mobile-cd') {
    stage('Checkout') {
      deleteDir()

      checkout poll: true, scm: [
        $class: 'GitSCM',
        branches: scm.branches,
        doGenerateSubmoduleConfigurations: false,
        extensions: [],
        submoduleCfg: [],
        userRemoteConfigs: scm.userRemoteConfigs
      ]
    }

    stage('Undeploy') {
      withCredentials([[
          $class: 'StringBinding',
          credentialsId: 'serverless-decrypt',
          variable: 'SERVERLESS_DECRYPT_KEY'
      ]]) {
        sh "./undeploy_jenkins.sh ${DEPLOY_ENVIRONMENT}"
      }
    }
  }
} catch (FlowInterruptedException f) {
  currentBuild.result = f.getResult()
} catch (Throwable unexpected) {
  currentBuild.result = "FAILURE"
  throw unexpected
} finally {
  String room = isProd(DEPLOY_ENVIRONMENT) ? 'ProductionDeploys' : 'Develop'
  String buildStatus = currentBuild.result ?: 'SUCCESS'

  hipchatSend(
    color: COLOR[buildStatus],
    message: "[${PROJECT.toUpperCase()}] UnDeploy ${buildStatus} -- ${env.JOB_NAME} #${env.BUILD_NUMBER} (<a href='${env.BUILD_URL}'>Open</a>)",
    notify: true,
    room: room
  )
}

private boolean isProd(String environment) {
  return environment =~ /prod/
}
